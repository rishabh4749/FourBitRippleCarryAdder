$date
	Wed Sep 20 15:13:19 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 4 ! carry [3:0] $end
$var wire 4 " sum [3:0] $end
$var reg 4 # A [3:0] $end
$var reg 4 $ B [3:0] $end
$var reg 2 % cin [1:0] $end
$scope module a0 $end
$var wire 4 & A [3:0] $end
$var wire 4 ' B [3:0] $end
$var wire 4 ( carries [3:0] $end
$var wire 2 ) cin [1:0] $end
$var wire 4 * sum [3:0] $end
$scope module adder0 $end
$var wire 1 + a $end
$var wire 1 , b $end
$var wire 1 - c $end
$var wire 1 . carry $end
$var wire 1 / sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 0 a $end
$var wire 1 1 b $end
$var wire 1 2 c $end
$var wire 1 3 carry $end
$var wire 1 4 sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 5 a $end
$var wire 1 6 b $end
$var wire 1 7 c $end
$var wire 1 8 carry $end
$var wire 1 9 sum $end
$upscope $end
$scope module adder3 $end
$var wire 1 : a $end
$var wire 1 ; b $end
$var wire 1 < c $end
$var wire 1 = carry $end
$var wire 1 > sum $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1>
0=
0<
0;
1:
19
08
07
06
15
14
03
02
01
10
1/
0.
0-
0,
1+
b1111 *
b0 )
b0 (
b0 '
b1111 &
b0 %
b0 $
b1111 #
b1111 "
b0 !
$end
